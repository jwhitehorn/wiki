<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScrewTurn.Wiki.Plugins.SqlCommon</name>
    </assembly>
    <members>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector">
            <summary>
            Defines the interface for a connector between an index to a pages storage provider.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector.GetWordFetcher">
            <summary>
            Invokes the GetWordFetcher delegate.
            </summary>
            <returns>The word fetcher.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector.GetSize">
            <summary>
            Defines a delegate for a method that gets the size of the approximate index in bytes.
            </summary>
            <returns>The size of the index, in bytes.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector.GetCount(ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType)">
            <summary>
            Invokes the GetCount delegate.
            </summary>
            <param name="element">The element type.</param>
            <returns>The element count.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector.ClearIndex(System.Object)">
            <summary>
            Invokes the ClearIndex delegate.
            </summary>
            <param name="state">A state object passed from the index.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector.DeleteDataForDocument(ScrewTurn.Wiki.SearchEngine.IDocument,System.Object)">
            <summary>
            Invokes the DeleteDataForDocument delegate.
            </summary>
            <param name="document">The document.</param>
            <param name="state">A state object passed from the index.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector.SaveDataForDocument(ScrewTurn.Wiki.SearchEngine.IDocument,ScrewTurn.Wiki.SearchEngine.WordInfo[],ScrewTurn.Wiki.SearchEngine.WordInfo[],ScrewTurn.Wiki.SearchEngine.WordInfo[],System.Object)">
            <summary>
            Invokes the SaveDataForDocument delegate.
            </summary>
            <param name="document">The document.</param>
            <param name="content">The content words.</param>
            <param name="title">The title words.</param>
            <param name="keywords">The keywords.</param>
            <param name="state">A state object passed from the index.</param>
            <returns>The number of stored occurrences.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.GetWordFetcher">
            <summary>
            Defines a delegate for a method for getting a word fetcher.
            </summary>
            <returns>The word fetcher.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.GetSize">
            <summary>
            Defines a delegate for a method that gets the size of the approximate index in bytes.
            </summary>
            <returns>The size of the index, in bytes.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.GetCount">
            <summary>
            Defines a delegate for a method that counts elements in the index.
            </summary>
            <param name="element">The element type.</param>
            <returns>The element count.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.ClearIndex">
            <summary>
            Defines a delegate for method that clears the index.
            </summary>
            <param name="state">A state object passed from the index.</param>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SaveDataForDocument">
            <summary>
            Defines a delegate for a method for saving data. The passed data is the whole document data, as it was tokenized.
            </summary>
            <param name="document">The document.</param>
            <param name="content">The content words.</param>
            <param name="title">The title words.</param>
            <param name="keywords">The keywords.</param>
            <param name="state">A state object passed from the index.</param>
            <returns>The number of stored occurrences.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.DeleteDataForDocument">
            <summary>
            Defines a delegate for a method for deleting a document's data.
            </summary>
            <param name="document">The document.</param>
            <param name="state">A state object passed from the index.</param>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.TryFindWord">
            <summary>
            Defines a delegate for a method for finding a word.
            </summary>
            <param name="text">The word text.</param>
            <param name="word">The returned word.</param>
            <param name="connection">An open database connection.</param>
            <returns><c>true</c> if the word is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType">
            <summary>
            Defines legal index element types.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType.Documents">
            <summary>
            The documents.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType.Words">
            <summary>
            The words.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType.Occurrences">
            <summary>
            The occurrences.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager">
            <summary>
            Implements a SQL ACL Manager.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.#ctor(ScrewTurn.Wiki.Plugins.SqlCommon.StoreEntry,ScrewTurn.Wiki.Plugins.SqlCommon.DeleteEntries,ScrewTurn.Wiki.Plugins.SqlCommon.RenameResource,ScrewTurn.Wiki.Plugins.SqlCommon.RetrieveAllEntries,ScrewTurn.Wiki.Plugins.SqlCommon.RetrieveEntriesForResource,ScrewTurn.Wiki.Plugins.SqlCommon.RetrieveEntriesForSubject)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAclManager" /> class.
            </summary>
            <param name="storeEntry">The <see cref="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.StoreEntry(System.String,System.String,System.String,ScrewTurn.Wiki.AclEngine.Value)"/> delegate.</param>
            <param name="deleteEntries">The <see cref="T:ScrewTurn.Wiki.Plugins.SqlCommon.DeleteEntries"/> delegate.</param>
            <param name="renameResource">The <see cref="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RenameResource(System.String,System.String)"/> delegate.</param>
            <param name="retrieveAllEntries">The <see cref="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RetrieveAllEntries"/> delegate.</param>
            <param name="retrieveEntriesForResource">The <see cref="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RetrieveEntriesForResource(System.String)"/> delegate.</param>
            <param name="retrieveEntriesForSubject">The <see cref="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RetrieveEntriesForSubject(System.String)"/> delegate.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.OnAclChanged(ScrewTurn.Wiki.AclEngine.AclEntry[],ScrewTurn.Wiki.AclEngine.Change)">
            <summary>
            Handles the invokation of <see cref="E:ScrewTurn.Wiki.AclEngine.IAclManager.AclChanged" /> event.
            </summary>
            <param name="entries">The changed entries.</param>
            <param name="change">The change.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.StoreEntry(System.String,System.String,System.String,ScrewTurn.Wiki.AclEngine.Value)">
            <summary>
            Stores a new ACL entry.
            </summary>
            <param name="resource">The controlled resource.</param>
            <param name="action">The action on the controlled resource.</param>
            <param name="subject">The subject whose access to the resource/action is controlled.</param>
            <param name="value">The value of the entry.</param>
            <returns><c>true</c> if the entry is stored, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resource"/>, <paramref name="action"/> or <paramref name="subject"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/>, <paramref name="action"/> or <paramref name="subject"/> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.DeleteEntry(System.String,System.String,System.String)">
            <summary>
            Deletes an ACL entry.
            </summary>
            <param name="resource">The controlled resource.</param>
            <param name="action">The action on the controlled resource.</param>
            <param name="subject">The subject whose access to the resource/action is controlled.</param>
            <returns><c>true</c> if the entry is deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resource"/>, <paramref name="action"/> or <paramref name="subject"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/>, <paramref name="action"/> or <paramref name="subject"/> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.DeleteEntriesForResource(System.String)">
            <summary>
            Deletes all the ACL entries for a resource.
            </summary>
            <param name="resource">The controlled resource.</param>
            <returns><c>true</c> if the entries are deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resource"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.DeleteEntriesForSubject(System.String)">
            <summary>
            Deletes all the ACL entries for a subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns><c>true</c> if the entries are deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="subject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="subject"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RenameResource(System.String,System.String)">
            <summary>
            Renames a resource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="newName">The new name of the resource.</param>
            <returns><c>true</c> if the resource is renamed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resource"/> or <paramref name="newName"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/> or <paramref name="newName"/> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RetrieveAllEntries">
            <summary>
            Retrieves all the ACL entries for a resource.
            </summary>
            <returns>The entries.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RetrieveEntriesForResource(System.String)">
            <summary>
            Retrieves all the ACL entries for a resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The entries.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resource"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.RetrieveEntriesForSubject(System.String)">
            <summary>
            Retrieves all the ACL entries for a subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>The entries.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="subject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="subject"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.InitializeData(ScrewTurn.Wiki.AclEngine.AclEntry[])">
            <summary>
            Initializes the manager data.
            </summary>
            <param name="entries">The ACL entries.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entries"/> is <c>null</c>.</exception>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.TotalEntries">
            <summary>
            Gets the total number of ACL entries.
            </summary>
        </member>
        <member name="E:ScrewTurn.Wiki.Plugins.SqlCommon.SqlAclManager.AclChanged">
            <summary>
            Event fired when an ACL entry is stored or deleted.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.StoreEntry">
            <summary>
            Defines a delegate for a method that stores a ACL entry in the storage.
            </summary>
            <param name="entry">The entry to store.</param>
            <returns><c>true</c> if the entry was stored, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.DeleteEntry">
            <summary>
            Defines a delegate for a method that deletes a ACL entry in the storage.
            </summary>
            <param name="entry">The entry to delete.</param>
            <remarks><c>true</c> if the entry was deleted, <c>false</c> otherwise.</remarks>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.DeleteEntries">
            <summary>
            Defines a delegate for a method that deletes ACL entries in the storage.
            </summary>
            <param name="entries">The entries to delete.</param>
            <remarks><c>true</c> if one or more enties were deleted, <c>false</c> otherwise.</remarks>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.RenameResource">
            <summary>
            Defines a delegate for a method that renames a resource.
            </summary>
            <param name="resource">The resource to rename.</param>
            <param name="newName">The new name of the resource.</param>
            <returns><c>true</c> if the resource was renamed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.RetrieveAllEntries">
            <summary>
            Defines a delegate for a method that retrieves all entries.
            </summary>
            <returns>The entries.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.RetrieveEntriesForResource">
            <summary>
            Defines a delegate for a method that retrieves all entries for a resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The entries of the resource.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.RetrieveEntriesForSubject">
            <summary>
            Defines a delegate for a method that retrieves all entries for a subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>The entries of the subject.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase">
            <summary>
            Implements a base class for all SQL-based classes.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.IsDBNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets a value indicating whether a column contains nonexistent or missing value.
            </summary>
            <param name="reader">The <see cref="T:DbDataReader" />.</param>
            <param name="column">The name of the column.</param>
            <returns><c>true</c> if the column contains a nonexistent or missing value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.GetNullableColumn``1(System.Data.Common.DbDataReader,System.String,``0)">
            <summary>
            Gets the value of a nullable column.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="reader">The <see cref="T:DbDataReader" />.</param>
            <param name="column">The name of the column.</param>
            <param name="defaultValue">The default value to return when the column contains a null value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.GetBinaryColumn(System.Data.Common.DbDataReader,System.String,System.Int32)">
            <summary>
            Reads all the contents of a binary column.
            </summary>
            <param name="reader">The <see cref="T:DbDataReader" />.</param>
            <param name="column">The name of the column.</param>
            <param name="maxSize">The max size, in bytes, to read. If exceeded, <c>null</c> is returned.</param>
            <returns>The read bytes, or <c>null</c>.</returns>
            <remarks>This method buffers the data in memory; avoid reading data bigger than a few megabytes.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ReadBinaryColumn(System.Data.Common.DbDataReader,System.String,System.IO.Stream)">
            <summary>
            Copies all the contents of a binary column into a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="reader">The <see cref="T:DbDataReader" />.</param>
            <param name="column">The name of the column.</param>
            <param name="stream">The destination <see cref="T:System.IO.Stream" />.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.LogException(System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ExecuteScalar``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Executes a scalar command, then closes the connection.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="command">The command to execute.</param>
            <param name="defaultValue">The default value of the return value, to use when the command fails.</param>
            <returns>The result.</returns>
            <remarks>The connection is closed after the execution.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ExecuteScalar``1(System.Data.Common.DbCommand,``0,System.Boolean)">
            <summary>
            Executes a scalar command, then closes the connection.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="command">The command to execute.</param>
            <param name="defaultValue">The default value of the return value, to use when the command fails.</param>
            <param name="close">A value indicating whether to close the connection after execution.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes a non-query command, then closes the connection.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>The rows affected (-1 if the command failed).</returns>
            <remarks>The connection is closed after the execution.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ExecuteNonQuery(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            Executes a non-query command, then closes the connection if requested.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="close">A value indicating whether to close the connection after execution.</param>
            <returns>The rows affected (-1 if the command failed).</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ExecuteNonQuery(System.Data.Common.DbCommand,System.Boolean,System.Boolean)">
            <summary>
            Executes a non-query command, then closes the connection if requested.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="close">A value indicating whether to close the connection after execution.</param>
            <param name="logError">A value indicating whether to log any error.</param>
            <returns>The rows affected (-1 if the command failed).</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ExecuteReader(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            Executes a reader command, leaving the connection open.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="closeOnError">A value indicating whether to close the connection on error.</param>
            <returns>The data reader, or <c>null</c> if the command fails.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes a reader command, leaving the connection open.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>The data reader, or <c>null</c> if the command fails.</returns>
            <remarks>If the command fails, the connection is closed.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.CloseConnection(System.Data.Common.DbConnection)">
            <summary>
            Closes a connection, swallowing all exceptions.
            </summary>
            <param name="connection">The connection to close.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.CloseReader(System.Data.Common.DbCommand,System.Data.Common.DbDataReader)">
            <summary>
            Closes a reader, a command and the associated connection.
            </summary>
            <param name="command">The command.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.CloseReader(System.Data.Common.DbDataReader)">
            <summary>
            Closes a reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.BeginTransaction(System.Data.Common.DbConnection)">
            <summary>
            Begins a transaction.
            </summary>
            <param name="connection">The connection.</param>
            <returns>The transaction.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.CommitTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Commits a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlClassBase.RollbackTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Rolls back a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase">
            <summary>
            Implements a base class for a SQL files storage provider.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.PrepareDirectory(System.String)">
            <summary>
            Prepares the directory name.
            </summary>
            <param name="directory">The directory to prepare.</param>
            <returns>The prepared directory, for example "/" or "/my/directory/".</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.DirectoryExists(System.Data.Common.DbConnection,System.String)">
            <summary>
            Determines whether a directory exists.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="directory">The directory, for example "/my/directory".</param>
            <returns><c>true</c> if the directory exists, <c>false</c> otherwise.</returns>
            <remarks>The root directory always exists.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.DirectoryExists(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Determines whether a directory exists.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="directory">The directory, for example "/my/directory".</param>
            <returns><c>true</c> if the directory exists, <c>false</c> otherwise.</returns>
            <remarks>The root directory always exists.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.SplitFileFullName(System.String,System.String@,System.String@)">
            <summary>
            Splits a file full name into the directory and file parts.
            </summary>
            <param name="fullName">The file full name, for example "/file.txt" or "/directory/file.txt".</param>
            <param name="directory">The resulting directory path, for example "/" or "/directory/".</param>
            <param name="file">The file name, for example "file.txt".</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.FileExists(System.Data.Common.DbConnection,System.String)">
            <summary>
            Determines whether a file exists.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="fullName">The file full name, for example "/file.txt" or "/directory/file.txt".</param>
            <returns><c>true</c> if the file exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.FileExists(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Determines whether a file exists.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="fullName">The file full name, for example "/file.txt" or "/directory/file.txt".</param>
            <returns><c>true</c> if the file exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ListFiles(System.String)">
            <summary>
            Lists the Files in the specified Directory.
            </summary>
            <param name="directory">The full directory name, for example "/my/directory". Null, empty or "/" for the root directory.</param>
            <returns>The list of Files in the directory.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="directory"/> does not exist.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ListDirectories(System.Data.Common.DbConnection,System.String)">
            <summary>
            Lists the Directories in the specified directory.
            </summary>
            <param name="connection">An open connection.</param>
            <param name="directory">The full directory name, for example "/my/directory". Null, empty or "/" for the root directory.</param>
            <returns>The list of Directories in the Directory.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ListDirectories(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Lists the Directories in the specified directory.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="directory">The full directory name, for example "/my/directory". Null, empty or "/" for the root directory.</param>
            <returns>The list of Directories in the Directory.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ListDirectories(System.String)">
            <summary>
            Lists the Directories in the specified directory.
            </summary>
            <param name="directory">The full directory name, for example "/my/directory". Null, empty or "/" for the root directory.</param>
            <returns>The list of Directories in the Directory.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="directory"/> does not exist.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.StoreFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Stores a file.
            </summary>
            <param name="fullName">The full name of the file.</param>
            <param name="sourceStream">A Stream object used as <b>source</b> of a byte stream,
            i.e. the method reads from the Stream and stores the content properly.</param>
            <param name="overwrite"><c>true</c> to overwrite an existing file.</param>
            <returns><c>true</c> if the File is stored, <c>false</c> otherwise.</returns>
            <remarks>If <b>overwrite</b> is <c>false</c> and File already exists, the method returns <c>false</c>.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullName"/> or <paramref name="sourceStream"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullName"/> is empty or <paramref name="sourceStream"/> does not support reading.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.RetrieveFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Retrieves a File.
            </summary>
            <param name="fullName">The full name of the File.</param>
            <param name="destinationStream">A Stream object used as <b>destination</b> of a byte stream,
            i.e. the method writes to the Stream the file content.</param>
            <param name="countHit">A value indicating whether or not to count this retrieval in the statistics.</param>
            <returns><c>true</c> if the file is retrieved, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullName"/> or <paramref name="destinationStream"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullName"/> is empty or <paramref name="destinationStream"/> does not support writing.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.SetFileRetrievalCount(System.String,System.Int32)">
            <summary>
            Sets the number of times a file was retrieved.
            </summary>
            <param name="fullName">The full name of the file.</param>
            <param name="count">The count to set.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullName"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.GetFileDetails(System.String)">
            <summary>
            Gets the details of a file.
            </summary>
            <param name="fullName">The full name of the file.</param>
            <returns>The details, or <c>null</c> if the file does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullName"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.DeleteFile(System.String)">
            <summary>
            Deletes a File.
            </summary>
            <param name="fullName">The full name of the File.</param>
            <returns><c>true</c> if the File is deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullName"/> is empty or it does not exist.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.RenameFile(System.String,System.String)">
            <summary>
            Renames or moves a File.
            </summary>
            <param name="oldFullName">The old full name of the File.</param>
            <param name="newFullName">The new full name of the File.</param>
            <returns><c>true</c> if the File is renamed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="oldFullName"/> or <paramref name="newFullName"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="oldFullName"/> or <paramref name="newFullName"/> are empty, or if the old file does not exist, or if the new file already exist.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.CreateDirectory(System.String,System.String)">
            <summary>
            Creates a new Directory.
            </summary>
            <param name="path">The path to create the new Directory in.</param>
            <param name="name">The name of the new Directory.</param>
            <returns><c>true</c> if the Directory is created, <c>false</c> otherwise.</returns>
            <remarks>If <b>path</b> is "/my/directory" and <b>name</b> is "newdir", a new directory named "/my/directory/newdir" is created.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> or <paramref name="name"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty or if the directory does not exist, or if the new directory already exists.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.DeleteDirectory(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Deletes a directory and all its contents.
            </summary>
            <param name="transaction">The current transaction to use.</param>
            <param name="fullPath">The full path of the directory.</param>
            <returns><c>true</c> if the directory is deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.DeleteDirectory(System.String)">
            <summary>
            Deletes a Directory and <b>all of its content</b>.
            </summary>
            <param name="fullPath">The full path of the Directory.</param>
            <returns><c>true</c> if the Directory is deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullPath"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullPath"/> is empty or if it equals '/' or it does not exist.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.RenameDirectory(System.Data.Common.DbTransaction,System.String,System.String)">
            <summary>
            Renames or moves a Directory.
            </summary>
            <param name="transaction">The current transaction to use.</param>
            <param name="oldFullPath">The old full path of the Directory.</param>
            <param name="newFullPath">The new full path of the Directory.</param>
            <returns><c>true</c> if the Directory is renamed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.RenameDirectory(System.String,System.String)">
            <summary>
            Renames or moves a Directory.
            </summary>
            <param name="oldFullPath">The old full path of the Directory.</param>
            <param name="newFullPath">The new full path of the Directory.</param>
            <returns><c>true</c> if the Directory is renamed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="oldFullPath"/> or <paramref name="newFullPath"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="oldFullPath"/> or <paramref name="newFullPath"/> are empty or equal to '/', 
            or if the old directory does not exist or the new directory already exists.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.GetPagesWithAttachments">
            <summary>
            The the names of the pages with attachments.
            </summary>
            <returns>The names of the pages with attachments.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ListPageAttachments(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Returns the names of the Attachments of a Page.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="pageInfo">The Page Info object that owns the Attachments.</param>
            <returns>The names, or an empty list.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ListPageAttachments(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Returns the names of the Attachments of a Page.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="pageInfo">The Page Info object that owns the Attachments.</param>
            <returns>The names, or an empty list.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ListPageAttachments(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Returns the names of the Attachments of a Page.
            </summary>
            <param name="pageInfo">The Page Info object that owns the Attachments.</param>
            <returns>The names, or an empty list.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pageInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.AttachmentExists(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.PageInfo,System.String)">
            <summary>
            Determines whether a page attachment exists.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="page">The page.</param>
            <param name="name">The attachment.</param>
            <returns><c>true</c> if the attachment exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.AttachmentExists(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo,System.String)">
            <summary>
            Determines whether a page attachment exists.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The page.</param>
            <param name="name">The attachment.</param>
            <returns><c>true</c> if the attachment exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.StorePageAttachment(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Stores a Page Attachment.
            </summary>
            <param name="pageInfo">The Page Info that owns the Attachment.</param>
            <param name="name">The name of the Attachment, for example "myfile.jpg".</param>
            <param name="sourceStream">A Stream object used as <b>source</b> of a byte stream,
            i.e. the method reads from the Stream and stores the content properly.</param>
            <param name="overwrite"><c>true</c> to overwrite an existing Attachment.</param>
            <returns><c>true</c> if the Attachment is stored, <c>false</c> otherwise.</returns>
            <remarks>If <b>overwrite</b> is <c>false</c> and Attachment already exists, the method returns <c>false</c>.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pageInfo"/>, <paramref name="name"/> or <paramref name="sourceStream"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty or if <paramref name="sourceStream"/> does not support reading.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.RetrievePageAttachment(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Retrieves a Page Attachment.
            </summary>
            <param name="pageInfo">The Page Info that owns the Attachment.</param>
            <param name="name">The name of the Attachment, for example "myfile.jpg".</param>
            <param name="destinationStream">A Stream object used as <b>destination</b> of a byte stream,
            i.e. the method writes to the Stream the file content.</param>
            <param name="countHit">A value indicating whether or not to count this retrieval in the statistics.</param>
            <returns><c>true</c> if the Attachment is retrieved, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pageInfo"/>, <paramref name="name"/> or <paramref name="destinationStream"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty or if <paramref name="destinationStream"/> does not support writing,
            or if the page does not have attachments or if the attachment does not exist.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.SetPageAttachmentRetrievalCount(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String,System.Int32)">
            <summary>
            Sets the number of times a page attachment was retrieved.
            </summary>
            <param name="pageInfo">The page.</param>
            <param name="name">The name of the attachment.</param>
            <param name="count">The count to set.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pageInfo"/> or <paramref name="name"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.GetPageAttachmentDetails(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String)">
            <summary>
            Gets the details of a page attachment.
            </summary>
            <param name="pageInfo">The page that owns the attachment.</param>
            <param name="name">The name of the attachment, for example "myfile.jpg".</param>
            <returns>The details of the attachment, or <c>null</c> if the attachment does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pageInfo"/> or <paramref name="name"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.DeletePageAttachment(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String)">
            <summary>
            Deletes a Page Attachment.
            </summary>
            <param name="pageInfo">The Page Info that owns the Attachment.</param>
            <param name="name">The name of the Attachment, for example "myfile.jpg".</param>
            <returns><c>true</c> if the Attachment is deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pageInfo"/> or <paramref name="name"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty or if the page or attachment do not exist.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.RenamePageAttachment(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String,System.String)">
            <summary>
            Renames a Page Attachment.
            </summary>
            <param name="pageInfo">The Page Info that owns the Attachment.</param>
            <param name="oldName">The old name of the Attachment.</param>
            <param name="newName">The new name of the Attachment.</param>
            <returns><c>true</c> if the Attachment is renamed, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pageInfo"/>, <paramref name="oldName"/> or <paramref name="newName"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="pageInfo"/>, <paramref name="oldName"/> or <paramref name="newName"/> are empty,
            or if the page or old attachment do not exist, or the new attachment name already exists.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.NotifyPageRenaming(ScrewTurn.Wiki.PluginFramework.PageInfo,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Notifies the Provider that a Page has been renamed.
            </summary>
            <param name="oldPage">The old Page Info object.</param>
            <param name="newPage">The new Page Info object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="oldPage"/> or <paramref name="newPage"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the new page is already in use.</exception>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlFilesStorageProviderBase.ReadOnly">
            <summary>
            Gets a value specifying whether the provider is read-only, i.e. it can only provide data and not store it.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex">
            <summary>
            Implements a SQL-based search engine index.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.stopWords">
            <summary>
            The stop words to be used while indexing new content.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.#ctor(ScrewTurn.Wiki.Plugins.SqlCommon.IIndexConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlIndex" /> class.
            </summary>
            <param name="connector">The connection object.</param>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.StopWords">
            <summary>
            Gets or sets the stop words to be used while indexing new content.
            </summary>
            <value></value>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.TotalWords">
            <summary>
            Gets the total count of unique words.
            </summary>
            <remarks>Computing the result is <n>O(1)</n>.</remarks>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.TotalDocuments">
            <summary>
            Gets the total count of documents.
            </summary>
            <remarks>Computing the result is <b>O(n*m)</b>, where <b>n</b> is the number of
            words in the index and <b>m</b> is the number of documents.</remarks>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.TotalOccurrences">
            <summary>
            Gets the total number of occurrences (count of words in each document).
            </summary>
            <remarks>Computing the result is <b>O(n)</b>,
            where <b>n</b> is the number of words in the index.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.Clear(System.Object)">
            <summary>
            Completely clears the index (stop words are not affected).
            </summary>
            <param name="state">A state object that is passed to the IndexStorer SaveDate/DeleteData function.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.StoreDocument(ScrewTurn.Wiki.SearchEngine.IDocument,System.String[],System.String,System.Object)">
            <summary>
            Stores a document in the index.
            </summary>
            <param name="document">The document.</param>
            <param name="keywords">The document keywords, if any, an empty array or <c>null</c> otherwise.</param>
            <param name="content">The content of the document.</param>
            <param name="state">A state object that is passed to the IndexStorer SaveDate/DeleteData function.</param>
            <returns>The number of indexed words (including duplicates).</returns>
            <remarks>Indexing the content of the document is <b>O(n)</b>,
            where <b>n</b> is the total number of words in the document.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.RemoveDocument(ScrewTurn.Wiki.SearchEngine.IDocument,System.Object)">
            <summary>
            Removes a document from the index.
            </summary>
            <param name="document">The document to remove.</param>
            <param name="state">A state object that is passed to the IndexStorer SaveDate/DeleteData function.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlIndex.Search(ScrewTurn.Wiki.SearchEngine.SearchParameters)">
            <summary>
            Performs a search in the index.
            </summary>
            <param name="parameters">The search parameters.</param>
            <returns>The results.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlWordFetcher">
            <summary>
            Implements a word fetcher for a SQL-based index.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlWordFetcher.#ctor(System.Data.Common.DbConnection,ScrewTurn.Wiki.Plugins.SqlCommon.TryFindWord)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlWordFetcher" /> class.
            </summary>
            <param name="connection">An open database connection.</param>
            <param name="implementation">The method implementation.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlWordFetcher.TryGetWord(System.String,ScrewTurn.Wiki.SearchEngine.Word@)">
            <summary>
            Tries to get a word.
            </summary>
            <param name="text">The text of the word.</param>
            <param name="word">The found word, if any, <c>null</c> otherwise.</param>
            <returns><c>true</c> if the word is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlWordFetcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector">
            <summary>
            Defines a connector between an index and a pages storage provider.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector.#ctor(ScrewTurn.Wiki.Plugins.SqlCommon.GetWordFetcher,ScrewTurn.Wiki.Plugins.SqlCommon.GetSize,ScrewTurn.Wiki.Plugins.SqlCommon.GetCount,ScrewTurn.Wiki.Plugins.SqlCommon.ClearIndex,ScrewTurn.Wiki.Plugins.SqlCommon.DeleteDataForDocument,ScrewTurn.Wiki.Plugins.SqlCommon.SaveDataForDocument,ScrewTurn.Wiki.Plugins.SqlCommon.TryFindWord)">
            <summary>
            Initializes a new instance of the <see cref="T:IndexConnector" /> class.
            </summary>
            <param name="getWordFetcher">The GetWordFetcher delegate.</param>
            <param name="getSize">The GetSize delegate.</param>
            <param name="getCount">The GetCount delegate.</param>
            <param name="clearIndex">The ClearIndex delegate.</param>
            <param name="deleteData">The DeleteDataForDocument delegate.</param>
            <param name="saveData">The SaveData delegate.</param>
            <param name="tryFindWord">The TryFindWord delegate.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector.GetWordFetcher">
            <summary>
            Invokes the GetWordFetcher delegate.
            </summary>
            <returns>The word fetcher.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector.GetSize">
            <summary>
            Defines a delegate for a method that gets the size of the approximate index in bytes.
            </summary>
            <returns>The size of the index, in bytes.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector.GetCount(ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType)">
            <summary>
            Invokes the GetCount delegate.
            </summary>
            <param name="element">The element type.</param>
            <returns>The element count.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector.ClearIndex(System.Object)">
            <summary>
            Invokes the ClearIndex delegate.
            </summary>
            <param name="state">A state object passed from the index.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector.DeleteDataForDocument(ScrewTurn.Wiki.SearchEngine.IDocument,System.Object)">
            <summary>
            Invokes the DeleteDataForDocument delegate.
            </summary>
            <param name="document">The document.</param>
            <param name="state">A state object passed from the index.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.IndexConnector.SaveDataForDocument(ScrewTurn.Wiki.SearchEngine.IDocument,ScrewTurn.Wiki.SearchEngine.WordInfo[],ScrewTurn.Wiki.SearchEngine.WordInfo[],ScrewTurn.Wiki.SearchEngine.WordInfo[],System.Object)">
            <summary>
            Invokes the SaveDataForDocument delegate.
            </summary>
            <param name="document">The document.</param>
            <param name="content">The content words.</param>
            <param name="title">The title words.</param>
            <param name="keywords">The keywords.</param>
            <param name="state">A state object passed from the index.</param>
            <returns>The number of stored occurrences.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase">
            <summary>
            Implements a base class for a SQL pages storage provider.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.Init(ScrewTurn.Wiki.PluginFramework.IHostV30,System.String)">
            <summary>
            Initializes the Storage Provider.
            </summary>
            <param name="host">The Host of the Component.</param>
            <param name="config">The Configuration data, if any.</param>
            <remarks>If the configuration string is not valid, the methoud should throw a <see cref="T:ScrewTurn.Wiki.PluginFramework.InvalidConfigurationException"/>.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.SetFlags(System.Boolean)">
            <summary>
            Sets test flags (to be used only for tests).
            </summary>
            <param name="alwaysGenerateDocument">A value indicating whether to always generate a result when resolving a document, 
            even when the page does not exist.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetWordFetcher">
            <summary>
            Gets a word fetcher.
            </summary>
            <returns>The word fetcher.</returns>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.Index">
            <summary>
            Gets the search index (only used for testing purposes).
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.PerformSearch(ScrewTurn.Wiki.SearchEngine.SearchParameters)">
            <summary>
            Performs a search in the index.
            </summary>
            <param name="parameters">The search parameters.</param>
            <returns>The results.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parameters"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RebuildIndex">
            <summary>
            Rebuilds the search index.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.IsIndexCorrupted">
            <summary>
            Gets a value indicating whether the search engine index is corrupted and needs to be rebuilt.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.BuildDocument(ScrewTurn.Wiki.SearchEngine.DumpedDocument)">
            <summary>
            Handles the construction of an <see cref="T:IDocument" /> for the search engine.
            </summary>
            <param name="dumpedDocument">The input dumped document.</param>
            <returns>The resulting <see cref="T:IDocument" />.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetIndexStats(System.Int32@,System.Int32@,System.Int32@,System.Int64@)">
            <summary>
            Gets some statistics about the search engine index.
            </summary>
            <param name="documentCount">The total number of documents.</param>
            <param name="wordCount">The total number of unique words.</param>
            <param name="occurrenceCount">The total number of word-document occurrences.</param>
            <param name="size">The approximated size, in bytes, of the search engine index.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetSize">
            <summary>
            Gets the approximate size, in bytes, of the search engine index.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCount(ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType)">
            <summary>
            Gets the number of elements in the index.
            </summary>
            <param name="element">The type of elements.</param>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.DeleteDataForDocument(ScrewTurn.Wiki.SearchEngine.IDocument,System.Object)">
            <summary>
            Deletes all data associated to a document.
            </summary>
            <param name="document">The document.</param>
            <param name="state">A state object passed from the index (can be <c>null</c> or a <see cref="T:DbTransaction" />).</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.SaveDataForDocument(ScrewTurn.Wiki.SearchEngine.IDocument,ScrewTurn.Wiki.SearchEngine.WordInfo[],ScrewTurn.Wiki.SearchEngine.WordInfo[],ScrewTurn.Wiki.SearchEngine.WordInfo[],System.Object)">
            <summary>
            Saves data for a new document.
            </summary>
            <param name="document">The document.</param>
            <param name="content">The content words.</param>
            <param name="title">The title words.</param>
            <param name="keywords">The keywords.</param>
            <param name="state">A state object passed from the index (can be <c>null</c> or a <see cref="T:DbTransaction" />).</param>
            <returns>The number of stored occurrences.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetFreeElementId(ScrewTurn.Wiki.Plugins.SqlCommon.IndexElementType,System.Data.Common.DbTransaction)">
            <summary>
            Gets a free element ID from the database.
            </summary>
            <param name="element">The element type.</param>
            <param name="transaction">The current database transaction.</param>
            <returns>The free element ID.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.TryFindWord(System.String,ScrewTurn.Wiki.SearchEngine.Word@,System.Data.Common.DbConnection)">
            <summary>
            Tries to load all data related to a word from the database.
            </summary>
            <param name="text">The word text.</param>
            <param name="word">The returned word.</param>
            <param name="connection">An open database connection.</param>
            <returns><c>true</c> if the word is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.ClearIndex(System.Object)">
            <summary>
            Clears the index.
            </summary>
            <param name="state">A state object passed from the index.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.TokenizeContent(System.String)">
            <summary>
            Tokenizes page content.
            </summary>
            <param name="content">The content to tokenize.</param>
            <returns>The tokenized words.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.IndexPage(ScrewTurn.Wiki.PluginFramework.PageContent,System.Data.Common.DbTransaction)">
            <summary>
            Indexes a page.
            </summary>
            <param name="content">The page content.</param>
            <param name="transaction">The current transaction.</param>
            <returns>The number of indexed words, including duplicates.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.UnindexPage(ScrewTurn.Wiki.PluginFramework.PageContent,System.Data.Common.DbTransaction)">
            <summary>
            Removes a page from the search engine index.
            </summary>
            <param name="content">The content of the page to remove.</param>
            <param name="transaction">The current transaction.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.IndexMessageTree(ScrewTurn.Wiki.PluginFramework.PageInfo,ScrewTurn.Wiki.PluginFramework.Message,System.Data.Common.DbTransaction)">
            <summary>
            Indexes a message tree.
            </summary>
            <param name="page">The page.</param>
            <param name="root">The root message.</param>
            <param name="transaction">The current transaction.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.IndexMessage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32,System.String,System.DateTime,System.String,System.Data.Common.DbTransaction)">
            <summary>
            Indexes a message.
            </summary>
            <param name="page">The page.</param>
            <param name="id">The message ID.</param>
            <param name="subject">The subject.</param>
            <param name="dateTime">The date/time.</param>
            <param name="body">The body.</param>
            <param name="transaction">The current transaction.</param>
            <returns>The number of indexed words, including duplicates.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.UnindexMessageTree(ScrewTurn.Wiki.PluginFramework.PageInfo,ScrewTurn.Wiki.PluginFramework.Message,System.Data.Common.DbTransaction)">
            <summary>
            Removes a message tree from the search engine index.
            </summary>
            <param name="page">The page.</param>
            <param name="root">The tree root.</param>
            <param name="transaction">The current transaction.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.UnindexMessage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32,System.String,System.DateTime,System.String,System.Data.Common.DbTransaction)">
            <summary>
            Removes a message from the search engine index.
            </summary>
            <param name="page">The page.</param>
            <param name="id">The message ID.</param>
            <param name="subject">The subject.</param>
            <param name="dateTime">The date/time.</param>
            <param name="body">The body.</param>
            <param name="transaction">The current transaction.</param>
            <returns>The number of indexed words, including duplicates.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetNamespace(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Gets a namespace.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="name">The name of the namespace (cannot be <c>null</c> or empty).</param>
            <returns>The <see cref="T:NamespaceInfo" />, or <c>null</c> if no namespace is found.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetNamespace(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets a namespace.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="name">The name of the namespace (cannot be <c>null</c> or empty).</param>
            <returns>The <see cref="T:NamespaceInfo" />, or <c>null</c> if no namespace is found.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetNamespace(System.String)">
            <summary>
            Gets a namespace.
            </summary>
            <param name="name">The name of the namespace (cannot be <c>null</c> or empty).</param>
            <returns>The <see cref="T:NamespaceInfo"/>, or <c>null</c> if no namespace is found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetNamespaces">
            <summary>
            Gets all the sub-namespaces.
            </summary>
            <returns>The sub-namespaces, sorted by name.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddNamespace(System.String)">
            <summary>
            Adds a new namespace.
            </summary>
            <param name="name">The name of the namespace.</param>
            <returns>The correct <see cref="T:NamespaceInfo"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RenameNamespace(ScrewTurn.Wiki.PluginFramework.NamespaceInfo,System.String)">
            <summary>
            Renames a namespace.
            </summary>
            <param name="nspace">The namespace to rename.</param>
            <param name="newName">The new name of the namespace.</param>
            <returns>The correct <see cref="T:NamespaceInfo"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="nspace"/> or <paramref name="newName"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="newName"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.SetNamespaceDefaultPage(ScrewTurn.Wiki.PluginFramework.NamespaceInfo,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Sets the default page of a namespace.
            </summary>
            <param name="nspace">The namespace of which to set the default page.</param>
            <param name="page">The page to use as default page, or <c>null</c>.</param>
            <returns>The correct <see cref="T:NamespaceInfo"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="nspace"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveNamespace(ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Removes a namespace.
            </summary>
            <param name="nspace">The namespace to remove.</param>
            <returns><c>true</c> if the namespace is removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="nspace"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.IsDefaultPage(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Determines whether a page is the default page of its namespace.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The page.</param>
            <returns><c>true</c> if the page is the default page, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.MovePage(ScrewTurn.Wiki.PluginFramework.PageInfo,ScrewTurn.Wiki.PluginFramework.NamespaceInfo,System.Boolean)">
            <summary>
            Moves a page from its namespace into another.
            </summary>
            <param name="page">The page to move.</param>
            <param name="destination">The destination namespace (<c>null</c> for the root).</param>
            <param name="copyCategories">A value indicating whether to copy the page categories in the destination
            namespace, if not already available.</param>
            <returns>The correct instance of <see cref="T:PageInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCategory(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Gets a category.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="fullName">The full name of the category.</param>
            <returns>The <see cref="T:CategoryInfo" />, or <c>null</c> if no category is found.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCategory(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets a category.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="fullName">The full name of the category.</param>
            <returns>The <see cref="T:CategoryInfo" />, or <c>null</c> if no category is found.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCategory(System.String)">
            <summary>
            Gets a category.
            </summary>
            <param name="fullName">The full name of the category.</param>
            <returns>The <see cref="T:CategoryInfo"/>, or <c>null</c> if no category is found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullName"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCategories(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the Categories in a namespace.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="nspace">The namespace.</param>
            <returns>All the Categories in the namespace. The array is not sorted.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCategories(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the Categories in a namespace.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="nspace">The namespace.</param>
            <returns>All the Categories in the namespace. The array is not sorted.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCategories(ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the Categories in a namespace.
            </summary>
            <param name="nspace">The namespace.</param>
            <returns>All the Categories in the namespace, sorted by name.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetCategoriesForPage(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets all the categories of a page.
            </summary>
            <param name="page">The page.</param>
            <returns>The categories, sorted by name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddCategory(System.String,System.String)">
            <summary>
            Adds a Category.
            </summary>
            <param name="nspace">The target namespace (<c>null</c> for the root).</param>
            <param name="name">The Category name.</param>
            <returns>The correct CategoryInfo object.</returns>
            <remarks>The method should set category's Pages to an empty array.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RenameCategory(ScrewTurn.Wiki.PluginFramework.CategoryInfo,System.String)">
            <summary>
            Renames a Category.
            </summary>
            <param name="category">The Category to rename.</param>
            <param name="newName">The new Name.</param>
            <returns>The correct CategoryInfo object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="category"/> or <paramref name="newName"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="newName"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveCategory(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.CategoryInfo)">
            <summary>
            Removes a Category.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="category">The Category to remove.</param>
            <returns>True if the Category has been removed successfully.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveCategory(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.CategoryInfo)">
            <summary>
            Removes a Category.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="category">The Category to remove.</param>
            <returns>True if the Category has been removed successfully.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveCategory(ScrewTurn.Wiki.PluginFramework.CategoryInfo)">
            <summary>
            Removes a Category.
            </summary>
            <param name="category">The Category to remove.</param>
            <returns>True if the Category has been removed successfully.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="category"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.MergeCategories(ScrewTurn.Wiki.PluginFramework.CategoryInfo,ScrewTurn.Wiki.PluginFramework.CategoryInfo)">
            <summary>
            Merges two Categories.
            </summary>
            <param name="source">The source Category.</param>
            <param name="destination">The destination Category.</param>
            <returns>The correct <see cref="T:CategoryInfo" /> object.</returns>
            <remarks>The destination Category remains, while the source Category is deleted, and all its Pages re-bound 
            in the destination Category.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> or <paramref name="destination"/> are <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.MergeArrays(System.String[],System.String[])">
            <summary>
            Merges two arrays of strings.
            </summary>
            <param name="array1">The first array.</param>
            <param name="array2">The second array.</param>
            <returns>The merged array.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetPage(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Gets a page.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="fullName">The full name of the page.</param>
            <returns>The <see cref="T:PageInfo" />, or <c>null</c> if no page is found.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetPage(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets a page.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="fullName">The full name of the page.</param>
            <returns>The <see cref="T:PageInfo" />, or <c>null</c> if no page is found.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetPage(System.String)">
            <summary>
            Gets a page.
            </summary>
            <param name="fullName">The full name of the page.</param>
            <returns>The <see cref="T:PageInfo"/>, or <c>null</c> if no page is found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullName"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetPages(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the Pages in a namespace.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="nspace">The namespace (<c>null</c> for the root).</param>
            <returns>All the Pages in the namespace. The array is not sorted.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetPages(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the Pages in a namespace.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="nspace">The namespace (<c>null</c> for the root).</param>
            <returns>All the Pages in the namespace. The array is not sorted.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetPages(ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the Pages in a namespace.
            </summary>
            <param name="nspace">The namespace (<c>null</c> for the root).</param>
            <returns>All the Pages in the namespace. The array is not sorted.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetUncategorizedPages(ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the pages in a namespace that are bound to zero categories.
            </summary>
            <param name="nspace">The namespace (<c>null</c> for the root).</param>
            <returns>The pages, sorted by name.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetContent(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32)">
            <summary>
            Gets the content of a specific revision of a page.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="page">The page.</param>
            <param name="revision">The revision.</param>
            <returns>The content.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetContent(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32)">
            <summary>
            Gets the content of a specific revision of a page.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The page.</param>
            <param name="revision">The revision.</param>
            <returns>The content.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetContent(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the Content of a Page.
            </summary>
            <param name="page">The Page.</param>
            <returns>The Page Content object, <c>null</c> if the page does not exist or <paramref name="page"/> is <c>null</c>,
            or an empty instance if the content could not be retrieved (<seealso cref="M:ScrewTurn.Wiki.PluginFramework.PageContent.GetEmpty(ScrewTurn.Wiki.PluginFramework.PageInfo)"/>).</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetDraft(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the content of a draft of a Page.
            </summary>
            <param name="page">The Page.</param>
            <returns>The draft, or <c>null</c> if no draft exists.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.DeleteDraft(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Deletes a draft of a Page.
            </summary>
            <param name="page">The page.</param>
            <returns><c>true</c> if the draft is deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetBackups(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the Backup/Revision numbers of a Page.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The Page to get the Backups of.</param>
            <returns>The Backup/Revision numbers.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetBackups(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the Backup/Revision numbers of a Page.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="page">The Page to get the Backups of.</param>
            <returns>The Backup/Revision numbers.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetBackups(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the Backup/Revision numbers of a Page.
            </summary>
            <param name="page">The Page to get the Backups of.</param>
            <returns>The Backup/Revision numbers.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetBackupContent(ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32)">
            <summary>
            Gets the Content of a Backup of a Page.
            </summary>
            <param name="page">The Page to get the backup of.</param>
            <param name="revision">The Backup/Revision number.</param>
            <returns>The Page Backup.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="revision"/> is less than zero.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.SetContent(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageContent,System.Int32)">
            <summary>
            Stores the content for a revision.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="content">The content.</param>
            <param name="revision">The revision.</param>
            <returns><c>true</c> if the content is stored, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.DeleteContent(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32)">
            <summary>
            Deletes a revision of a page content.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The page.</param>
            <param name="revision">The revision.</param>
            <returns><c>true</c> if the content ir deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.DeleteContent(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32)">
            <summary>
            Deletes a revision of a page content.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="page">The page.</param>
            <param name="revision">The revision.</param>
            <returns><c>true</c> if the content ir deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.SetBackupContent(ScrewTurn.Wiki.PluginFramework.PageContent,System.Int32)">
            <summary>
            Forces to overwrite or create a Backup.
            </summary>
            <param name="content">The Backup content.</param>
            <param name="revision">The revision.</param>
            <returns>True if the Backup has been created successfully.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="content"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="revision"/> is less than zero.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddPage(System.String,System.String,System.DateTime)">
            <summary>
            Adds a Page.
            </summary>
            <param name="nspace">The target namespace (<c>null</c> for the root).</param>
            <param name="name">The Page Name.</param>
            <param name="creationDateTime">The creation Date/Time.</param>
            <returns>The correct PageInfo object or null.</returns>
            <remarks>This method should <b>not</b> create the content of the Page.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RenamePage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String)">
            <summary>
            Renames a Page.
            </summary>
            <param name="page">The Page to rename.</param>
            <param name="newName">The new Name.</param>
            <returns>The correct <see cref="T:PageInfo"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> or <paramref name="newName"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="newName"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.ModifyPage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String,System.String,System.DateTime,System.String,System.String,System.String[],System.String,ScrewTurn.Wiki.PluginFramework.SaveMode)">
            <summary>
            Modifies the Content of a Page.
            </summary>
            <param name="page">The Page.</param>
            <param name="title">The Title of the Page.</param>
            <param name="username">The Username.</param>
            <param name="dateTime">The Date/Time.</param>
            <param name="comment">The Comment of the editor, about this revision.</param>
            <param name="content">The Page Content.</param>
            <param name="keywords">The keywords, usually used for SEO.</param>
            <param name="description">The description, usually used for SEO.</param>
            <param name="saveMode">The save mode for this modification.</param>
            <returns><c>true</c> if the Page has been modified successfully, <c>false</c> otherwise.</returns>
            <remarks>If <b>saveMode</b> equals <b>Draft</b> and a draft already exists, it is overwritten.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/>, <paramref name="title"/>, <paramref name="username"/> or <paramref name="content"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="title"/> or <paramref name="username"/> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.Backup(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Backs up the content of a page.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The page.</param>
            <returns><c>true</c> if the backup is performed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RollbackPage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32)">
            <summary>
            Performs the rollback of a Page to a specified revision.
            </summary>
            <param name="page">The Page to rollback.</param>
            <param name="revision">The Revision to rollback the Page to.</param>
            <returns><c>true</c> if the rollback succeeded, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="revision"/> is less than zero.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.DeleteBackups(ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32)">
            <summary>
            Deletes the Backups of a Page, up to a specified revision.
            </summary>
            <param name="page">The Page to delete the backups of.</param>
            <param name="revision">The newest revision to delete (newer revision are kept) o -1 to delete all the Backups.</param>
            <returns><c>true</c> if the deletion succeeded, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="revision"/> is less than -1.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemovePage(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Removes a Page.
            </summary>
            <param name="page">The Page to remove.</param>
            <returns>True if the Page is removed successfully.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RebindPage(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo,System.String[])">
            <summary>
            Binds a Page with one or more Categories.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The Page to bind.</param>
            <param name="categories">The Categories to bind the Page with.</param>
            <returns>True if the binding succeeded.</returns>
            <remarks>After a successful operation, the Page is bound with all and only the categories passed as argument.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RebindPage(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.PageInfo,System.String[])">
            <summary>
            Binds a Page with one or more Categories.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="page">The Page to bind.</param>
            <param name="categories">The Categories to bind the Page with.</param>
            <returns>True if the binding succeeded.</returns>
            <remarks>After a successful operation, the Page is bound with all and only the categories passed as argument.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RebindPage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String[])">
            <summary>
            Binds a Page with one or more Categories.
            </summary>
            <param name="page">The Page to bind.</param>
            <param name="categories">The Categories to bind the Page with.</param>
            <returns>True if the binding succeeded.</returns>
            <remarks>After a successful operation, the Page is bound with all and only the categories passed as argument.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> or <paramref name="categories"/> are <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetMessages(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the Page Messages.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The Page.</param>
            <returns>The list of the <b>first-level</b> Messages, containing the replies properly nested, sorted by date/time.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetMessages(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the Page Messages.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="page">The Page.</param>
            <returns>The list of the <b>first-level</b> Messages, containing the replies properly nested, sorted by date/time.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetMessages(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the Page Messages.
            </summary>
            <param name="page">The Page.</param>
            <returns>The list of the <b>first-level</b> Messages, containing the replies properly nested, sorted by date/time.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetMessageCount(ScrewTurn.Wiki.PluginFramework.PageInfo)">
            <summary>
            Gets the total number of Messages in a Page Discussion.
            </summary>
            <param name="page">The Page.</param>
            <returns>The number of messages.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.BulkStoreMessages(ScrewTurn.Wiki.PluginFramework.PageInfo,ScrewTurn.Wiki.PluginFramework.Message[])">
            <summary>
            Removes all messages for a page and stores the new messages.
            </summary>
            <param name="page">The page.</param>
            <param name="messages">The new messages to store.</param>
            <returns><c>true</c> if the messages are stored, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> or <paramref name="messages"/> are <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.UnTreeMessages(ScrewTurn.Wiki.PluginFramework.Message[],System.Collections.Generic.List{ScrewTurn.Wiki.PluginFramework.Message}@,System.Collections.Generic.List{System.Int32}@,System.Int32)">
            <summary>
            Deconstructs a tree of messages and converts it into a flat list.
            </summary>
            <param name="messages">The input tree.</param>
            <param name="flatList">The resulting flat message list.</param>
            <param name="parent">The list of parent IDs.</param>
            <param name="parents">The current parent ID.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddMessage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.String,System.String,System.DateTime,System.String,System.Int32)">
            <summary>
            Adds a new Message to a Page.
            </summary>
            <param name="page">The Page.</param>
            <param name="username">The Username.</param>
            <param name="subject">The Subject.</param>
            <param name="dateTime">The Date/Time.</param>
            <param name="body">The Body.</param>
            <param name="parent">The Parent Message ID, or -1.</param>
            <returns>True if the Message is added successfully.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/>, <paramref name="username"/>, <paramref name="subject"/> or <paramref name="body"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="username"/> or <paramref name="subject"/> are empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="parent"/> is less than -1.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.FindMessage(System.Collections.Generic.IEnumerable{ScrewTurn.Wiki.PluginFramework.Message},System.Int32)">
            <summary>
            Finds a Message in a Message tree.
            </summary>
            <param name="messages">The Message tree.</param>
            <param name="id">The ID of the Message to find.</param>
            <returns>The Message or null.</returns>
            <remarks>The method is recursive.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.FindAnchestor(System.Collections.Generic.IEnumerable{ScrewTurn.Wiki.PluginFramework.Message},System.Int32)">
            <summary>
            Finds the anchestor/parent of a Message.
            </summary>
            <param name="messages">The Messages.</param>
            <param name="id">The Message ID.</param>
            <returns>The anchestor Message or null.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveMessage(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32,System.Boolean)">
            <summary>
            Removes a Message.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="page">The Page.</param>
            <param name="id">The ID of the Message to remove.</param>
            <param name="removeReplies">A value specifying whether or not to remove the replies.</param>
            <returns>True if the Message is removed successfully.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveMessage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32,System.Boolean)">
            <summary>
            Removes a Message.
            </summary>
            <param name="page">The Page.</param>
            <param name="id">The ID of the Message to remove.</param>
            <param name="removeReplies">A value specifying whether or not to remove the replies.</param>
            <returns>True if the Message is removed successfully.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="id"/> is less than zero.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.ModifyMessage(ScrewTurn.Wiki.PluginFramework.PageInfo,System.Int32,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Modifies a Message.
            </summary>
            <param name="page">The Page.</param>
            <param name="id">The ID of the Message to modify.</param>
            <param name="username">The Username.</param>
            <param name="subject">The Subject.</param>
            <param name="dateTime">The Date/Time.</param>
            <param name="body">The Body.</param>
            <returns>True if the Message is modified successfully.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="page"/>, <paramref name="username"/>, <paramref name="subject"/> or <paramref name="body"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="id"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="username"/> or <paramref name="subject"/> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetNavigationPaths(ScrewTurn.Wiki.PluginFramework.NamespaceInfo)">
            <summary>
            Gets all the Navigation Paths in a Namespace.
            </summary>
            <param name="nspace">The Namespace.</param>
            <returns>All the Navigation Paths, sorted by name.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddNavigationPath(System.Data.Common.DbTransaction,System.String,System.String,ScrewTurn.Wiki.PluginFramework.PageInfo[])">
            <summary>
            Adds a new Navigation Path.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="nspace">The target namespace (<c>null</c> for the root).</param>
            <param name="name">The Name of the Path.</param>
            <param name="pages">The Pages array.</param>
            <returns>The correct <see cref="T:NavigationPath"/> object.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddNavigationPath(System.String,System.String,ScrewTurn.Wiki.PluginFramework.PageInfo[])">
            <summary>
            Adds a new Navigation Path.
            </summary>
            <param name="nspace">The target namespace (<c>null</c> for the root).</param>
            <param name="name">The Name of the Path.</param>
            <param name="pages">The Pages array.</param>
            <returns>The correct <see cref="T:NavigationPath"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> or <paramref name="pages"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> or <paramref name="pages"/> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.ModifyNavigationPath(ScrewTurn.Wiki.PluginFramework.NavigationPath,ScrewTurn.Wiki.PluginFramework.PageInfo[])">
            <summary>
            Modifies an existing navigation path.
            </summary>
            <param name="path">The navigation path to modify.</param>
            <param name="pages">The new pages array.</param>
            <returns>The correct <see cref="T:NavigationPath"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> or <paramref name="pages"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="pages"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveNavigationPath(System.Data.Common.DbTransaction,ScrewTurn.Wiki.PluginFramework.NavigationPath)">
            <summary>
            Removes a Navigation Path.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="path">The navigation path to remove.</param>
            <returns><c>true</c> if the path is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveNavigationPath(System.Data.Common.DbConnection,ScrewTurn.Wiki.PluginFramework.NavigationPath)">
            <summary>
            Removes a Navigation Path.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="path">The navigation path to remove.</param>
            <returns><c>true</c> if the path is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveNavigationPath(ScrewTurn.Wiki.PluginFramework.NavigationPath)">
            <summary>
            Removes a Navigation Path.
            </summary>
            <param name="path">The navigation path to remove.</param>
            <returns><c>true</c> if the path is removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetSnippets">
            <summary>
            Gets all the snippets.
            </summary>
            <returns>All the snippets, sorted by name.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddSnippet(System.Data.Common.DbTransaction,System.String,System.String)">
            <summary>
            Adds a new snippet.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="name">The name of the snippet.</param>
            <param name="content">The content of the snippet.</param>
            <returns>The correct <see cref="T:Snippet"/> object.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddSnippet(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
            Adds a new snippet.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="name">The name of the snippet.</param>
            <param name="content">The content of the snippet.</param>
            <returns>The correct <see cref="T:Snippet"/> object.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddSnippet(System.String,System.String)">
            <summary>
            Adds a new snippet.
            </summary>
            <param name="name">The name of the snippet.</param>
            <param name="content">The content of the snippet.</param>
            <returns>The correct <see cref="T:Snippet"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> or <paramref name="content"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.ModifySnippet(System.String,System.String)">
            <summary>
            Modifies an existing snippet.
            </summary>
            <param name="name">The name of the snippet to modify.</param>
            <param name="content">The content of the snippet.</param>
            <returns>The correct <see cref="T:Snippet"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> or <paramref name="content"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveSnippet(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Removes a new Snippet.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="name">The Name of the Snippet to remove.</param>
            <returns><c>true</c> if the snippet is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveSnippet(System.Data.Common.DbConnection,System.String)">
            <summary>
            Removes a new Snippet.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="name">The Name of the Snippet to remove.</param>
            <returns><c>true</c> if the snippet is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveSnippet(System.String)">
            <summary>
            Removes a new Snippet.
            </summary>
            <param name="name">The Name of the Snippet to remove.</param>
            <returns><c>true</c> if the snippet is removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.GetContentTemplates">
            <summary>
            Gets all the content templates.
            </summary>
            <returns>All the content templates, sorted by name.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddContentTemplate(System.Data.Common.DbTransaction,System.String,System.String)">
            <summary>
            Adds a new content template.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="name">The name of template.</param>
            <param name="content">The content of the template.</param>
            <returns>The correct <see cref="T:ContentTemplate"/> object.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddContentTemplate(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
            Adds a new content template.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="name">The name of template.</param>
            <param name="content">The content of the template.</param>
            <returns>The correct <see cref="T:ContentTemplate"/> object.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.AddContentTemplate(System.String,System.String)">
            <summary>
            Adds a new content template.
            </summary>
            <param name="name">The name of template.</param>
            <param name="content">The content of the template.</param>
            <returns>The correct <see cref="T:ContentTemplate"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> or <paramref name="content"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.ModifyContentTemplate(System.String,System.String)">
            <summary>
            Modifies an existing content template.
            </summary>
            <param name="name">The name of the template to modify.</param>
            <param name="content">The content of the template.</param>
            <returns>The correct <see cref="T:ContentTemplate"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> or <paramref name="content"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveContentTemplate(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Removes a content template.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="name">The name of the template to remove.</param>
            <returns><c>true</c> if the template is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveContentTemplate(System.Data.Common.DbConnection,System.String)">
            <summary>
            Removes a content template.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="name">The name of the template to remove.</param>
            <returns><c>true</c> if the template is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.RemoveContentTemplate(System.String)">
            <summary>
            Removes a content template.
            </summary>
            <param name="name">The name of the template to remove.</param>
            <returns><c>true</c> if the template is removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlPagesStorageProviderBase.ReadOnly">
            <summary>
            Gets a value specifying whether the provider is read-only, i.e. it can only provide data and not store it.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase">
            <summary>
            Implements a base class for a SQL settings storage provider.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.isFirstStart">
            <summary>
            Holds a value indicating whether the application was started for the first time.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.Init(ScrewTurn.Wiki.PluginFramework.IHostV30,System.String)">
            <summary>
            Initializes the Storage Provider.
            </summary>
            <param name="host">The Host of the Component.</param>
            <param name="config">The Configuration data, if any.</param>
            <remarks>If the configuration string is not valid, the methoud should throw a <see cref="T:ScrewTurn.Wiki.PluginFramework.InvalidConfigurationException"/>.</remarks>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DefaultUsersStorageProvider">
            <summary>
            Gets the default users storage provider, when no value is stored in the database.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DefaultPagesStorageProvider">
            <summary>
            Gets the default pages storage provider, when no value is stored in the database.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DefaultFilesStorageProvider">
            <summary>
            Gets the default files storage provider, when no value is stored in the database.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetSetting(System.String)">
            <summary>
            Retrieves the value of a Setting.
            </summary>
            <param name="name">The name of the Setting.</param>
            <returns>The value of the Setting, or null.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>name</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>name</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.SetSetting(System.String,System.String)">
            <summary>
            Stores the value of a Setting.
            </summary>
            <param name="name">The name of the Setting.</param>
            <param name="value">The value of the Setting. Value cannot contain CR and LF characters, which will be removed.</param>
            <returns>True if the Setting is stored, false otherwise.</returns>
            <remarks>This method stores the Value immediately.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetAllSettings">
            <summary>
            Gets the all the setting values.
            </summary>
            <returns>All the settings.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.BeginBulkUpdate">
            <summary>
            Starts a Bulk update of the Settings so that a bulk of settings can be set before storing them.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.EndBulkUpdate">
            <summary>
            Ends a Bulk update of the Settings and stores the settings.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.EntryTypeToChar(ScrewTurn.Wiki.PluginFramework.EntryType)">
            <summary>
            Converts an <see cref="T:EntryType" /> to its character representation.
            </summary>
            <param name="type">The <see cref="T:EntryType" />.</param>
            <returns>Th haracter representation.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.EntryTypeFromChar(System.Char)">
            <summary>
            Converts the character representation of an <see cref="T:EntryType" /> back to the enumeration value.
            </summary>
            <param name="c">The character representation.</param>
            <returns>The<see cref="T:EntryType" />.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.Sanitize(System.String)">
            <summary>
            Sanitizes a stiring from all unfriendly characters.
            </summary>
            <param name="input">The input string.</param>
            <returns>The sanitized result.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.LogEntry(System.String,ScrewTurn.Wiki.PluginFramework.EntryType,System.String)">
            <summary>
            Records a message to the System Log.
            </summary>
            <param name="message">The Log Message.</param>
            <param name="entryType">The Type of the Entry.</param>
            <param name="user">The User.</param>
            <remarks>This method <b>should not</b> write messages to the Log using the method IHost.LogEntry.
            This method should also never throw exceptions (except for parameter validation).</remarks>
            <exception cref="T:System.ArgumentNullException">If <b>message</b> or <b>user</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>message</b> or <b>user</b> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.CutLog(System.Int32)">
            <summary>
            Reduces the size of the Log to the specified size (or less).
            </summary>
            <param name="size">The size to shrink the log to (in bytes).</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetLogEntries">
            <summary>
            Gets all the Log Entries, sorted by date/time (oldest to newest).
            </summary>
            <returns>The Log Entries.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.ClearLog">
            <summary>
            Clear the Log.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.LogSize">
            <summary>
            Gets the current size of the Log, in KB.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetMetaDataItem(ScrewTurn.Wiki.PluginFramework.MetaDataItem,System.String)">
            <summary>
            Gets a meta-data item's content.
            </summary>
            <param name="item">The item.</param>
            <param name="tag">The tag that specifies the context (usually the namespace).</param>
            <returns>The content.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.SetMetaDataItem(ScrewTurn.Wiki.PluginFramework.MetaDataItem,System.String,System.String)">
            <summary>
            Sets a meta-data items' content.
            </summary>
            <param name="item">The item.</param>
            <param name="tag">The tag that specifies the context (usually the namespace).</param>
            <param name="content">The content.</param>
            <returns><c>true</c> if the content is set, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.RecentChangeToChar(ScrewTurn.Wiki.PluginFramework.Change)">
            <summary>
            Converts a <see cref="T:ScrewTurn.Wiki.PluginFramework.Change" /> to its character representation.
            </summary>
            <param name="change">The <see cref="T:ScrewTurn.Wiki.PluginFramework.Change" />.</param>
            <returns>The character representation.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.RecentChangeFromChar(System.Char)">
            <summary>
            Converts a character representation of a <see cref="T:ScrewTurn.Wiki.PluginFramework.Change" /> back to the enum value.
            </summary>
            <param name="c">The character representation.</param>
            <returns>The <see cref="T:ScrewTurn.Wiki.PluginFramework.Change" />.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetRecentChanges">
            <summary>
            Gets the recent changes of the Wiki.
            </summary>
            <returns>The recent Changes, oldest to newest.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.AddRecentChange(System.String,System.String,System.String,System.DateTime,System.String,ScrewTurn.Wiki.PluginFramework.Change,System.String)">
            <summary>
            Adds a new change.
            </summary>
            <param name="page">The page name.</param>
            <param name="title">The page title.</param>
            <param name="messageSubject">The message subject (or <c>null</c>).</param>
            <param name="dateTime">The date/time.</param>
            <param name="user">The user.</param>
            <param name="change">The change.</param>
            <param name="descr">The description (optional).</param>
            <returns><c>true</c> if the change is saved, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>page</b>, <b>title</b> or <b>user</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>page</b>, <b>title</b> or <b>user</b> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.CutRecentChangesIfNecessary">
            <summary>
            Cuts the recent changes if necessary.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.ListPluginAssemblies">
            <summary>
            Lists the stored plugin assemblies.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.StorePluginAssembly(System.String,System.Byte[])">
            <summary>
            Stores a plugin's assembly, overwriting existing ones if present.
            </summary>
            <param name="filename">The file name of the assembly, such as "Assembly.dll".</param>
            <param name="assembly">The assembly content.</param>
            <returns><c>true</c> if the assembly is stored, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>filename</b> or <b>assembly</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>filename</b> or <b>assembly</b> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.RetrievePluginAssembly(System.String)">
            <summary>
            Retrieves a plugin's assembly.
            </summary>
            <param name="filename">The file name of the assembly.</param>
            <returns>The assembly content, or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>filename</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>filename</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DeletePluginAssembly(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Removes a plugin's assembly.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="filename">The file name of the assembly to remove, such as "Assembly.dll".</param>
            <returns><c>true</c> if the assembly is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DeletePluginAssembly(System.Data.Common.DbConnection,System.String)">
            <summary>
            Removes a plugin's assembly.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="filename">The file name of the assembly to remove, such as "Assembly.dll".</param>
            <returns><c>true</c> if the assembly is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DeletePluginAssembly(System.String)">
            <summary>
            Removes a plugin's assembly.
            </summary>
            <param name="filename">The file name of the assembly to remove, such as "Assembly.dll".</param>
            <returns><c>true</c> if the assembly is removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>filename</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>filename</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.PreparePluginStatusRow(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Prepares the plugin status row, if necessary.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="typeName">The Type name of the plugin.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.SetPluginStatus(System.String,System.Boolean)">
            <summary>
            Sets the status of a plugin.
            </summary>
            <param name="typeName">The Type name of the plugin.</param>
            <param name="enabled">The plugin status.</param>
            <returns><c>true</c> if the status is stored, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>typeName</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>typeName</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetPluginStatus(System.String)">
            <summary>
            Gets the status of a plugin.
            </summary>
            <param name="typeName">The Type name of the plugin.</param>
            <returns>The status (<c>false</c> for disabled, <c>true</c> for enabled), or <c>true</c> if no status is found.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>typeName</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>typeName</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.SetPluginConfiguration(System.String,System.String)">
            <summary>
            Sets the configuration of a plugin.
            </summary>
            <param name="typeName">The Type name of the plugin.</param>
            <param name="config">The configuration.</param>
            <returns><c>true</c> if the configuration is stored, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>typeName</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>typeName</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetPluginConfiguration(System.String)">
            <summary>
            Gets the configuration of a plugin.
            </summary>
            <param name="typeName">The Type name of the plugin.</param>
            <returns>The plugin configuration, or <b>String.Empty</b>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>typeName</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>typeName</b> is empty.</exception>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.AclManager">
            <summary>
            Gets the ACL Manager instance.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.StoreOutgoingLinks(System.String,System.String[])">
            <summary>
            Stores the outgoing links of a page, overwriting existing data.
            </summary>
            <param name="page">The full name of the page.</param>
            <param name="outgoingLinks">The full names of the pages that <b>page</b> links to.</param>
            <returns><c>true</c> if the outgoing links are stored, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>page</b> or <b>outgoingLinks</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>page</b> or <b>outgoingLinks</b> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetOutgoingLinks(System.String)">
            <summary>
            Gets the outgoing links of a page.
            </summary>
            <param name="page">The full name of the page.</param>
            <returns>The outgoing links.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>page</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>page</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.GetAllOutgoingLinks">
            <summary>
            Gets all the outgoing links stored.
            </summary>
            <returns>The outgoing links, in a dictionary in the form page-&gt;outgoing_links.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DeleteOutgoingLinks(System.String)">
            <summary>
            Deletes the outgoing links of a page and all the target links that include the page.
            </summary>
            <param name="page">The full name of the page.</param>
            <returns><c>true</c> if the links are deleted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>page</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>page</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.UpdateOutgoingLinksForRename(System.String,System.String)">
            <summary>
            Updates all outgoing links data for a page rename.
            </summary>
            <param name="oldName">The old page name.</param>
            <param name="newName">The new page name.</param>
            <returns><c>true</c> if the data is updated, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>oldName</b> or <b>newName</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>oldName</b> or <b>newName</b> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.IsFirstApplicationStart">
            <summary>
            Determines whether the application was started for the first time.
            </summary>
            <returns><c>true</c> if the application was started for the first time, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.AclEntryValueToChar(ScrewTurn.Wiki.AclEngine.Value)">
            <summary>
            Converts a <see cref="T:Value" /> to its corresponding character representation.
            </summary>
            <param name="value">The <see cref="T:Value" />.</param>
            <returns>The character representation.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.AclEntryValueFromChar(System.Char)">
            <summary>
            Converts a character representation of a <see cref="T:Value" /> back to the enum value.
            </summary>
            <param name="c">The character representation.</param>
            <returns>The <see cref="T:Value" />.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.RetrieveAllAclEntries">
            <summary>
            Retrieves all ACL entries.
            </summary>
            <returns>The ACL entries.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.RetrieveAclEntriesForResource(System.String)">
            <summary>
            Retrieves all ACL entries for a resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The ACL entries for the resource.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.RetrieveAclEntriesForSubject(System.String)">
            <summary>
            Retrieves all ACL entries for a subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>The ACL entries for the subject.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.DeleteEntries(ScrewTurn.Wiki.AclEngine.AclEntry[])">
            <summary>
            Deletes some ACL entries.
            </summary>
            <param name="entries">The entries to delete.</param>
            <returns><c>true</c> if one or more entries were deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.StoreEntry(ScrewTurn.Wiki.AclEngine.AclEntry)">
            <summary>
            Stores a ACL entry.
            </summary>
            <param name="entry">The entry to store.</param>
            <returns><c>true</c> if the entry was stored, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlSettingsStorageProviderBase.RenameAclResource(System.String,System.String)">
            <summary>
            Renames a ACL resource.
            </summary>
            <param name="resource">The resource to rename.</param>
            <param name="newName">The new name of the resource.</param>
            <returns><c>true</c> if one or more entries weere updated, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase">
            <summary>
            Implements a base class for a SQL storage provider.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.connString">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.host">
            <summary>
            The host.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.GetCommandBuilder">
            <summary>
            Gets a new command builder object.
            </summary>
            <returns>The command builder.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.LogException(System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.ValidateConnectionString(System.String)">
            <summary>
            Validates a connection string.
            </summary>
            <param name="connString">The connection string to validate.</param>
            <remarks>If the connection string is invalid, the method throws <see cref="T:InvalidConfigurationException" />.</remarks>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.CreateOrUpdateDatabaseIfNecessary">
            <summary>
            Creates or updates the database schema if necessary.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.TryLoadV2Configuration">
            <summary>
            Tries to load the configuration from a corresponding v2 provider.
            </summary>
            <returns>The configuration, or an empty string.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.TryLoadSettingsStorageProviderConfiguration">
            <summary>
            Tries to load the configuration of the corresponding settings storage provider.
            </summary>
            <returns>The configuration, or an empty string.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.Init(ScrewTurn.Wiki.PluginFramework.IHostV30,System.String)">
            <summary>
            Initializes the Storage Provider.
            </summary>
            <param name="host">The Host of the Component.</param>
            <param name="config">The Configuration data, if any.</param>
            <exception cref="T:System.ArgumentNullException">If <b>host</b> or <b>config</b> are <c>null</c>.</exception>
            <exception cref="T:ScrewTurn.Wiki.PluginFramework.InvalidConfigurationException">If <b>config</b> is not valid or is incorrect.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.Shutdown">
            <summary>
            Method invoked on shutdown.
            </summary>
            <remarks>This method might not be invoked in some cases.</remarks>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.Information">
            <summary>
            Gets the Information about the Provider.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlStorageProviderBase.ConfigHelpHtml">
            <summary>
            Gets a brief summary of the configuration string format, in HTML. Returns <c>null</c> if no configuration is needed.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.Hash">
            <summary>
            Computes hashes.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.Hash.ComputeBytes(System.String)">
            <summary>
            Computes the Hash code of a string.
            </summary>
            <param name="input">The string.</param>
            <returns>The Hash code.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.Hash.Compute(System.String)">
            <summary>
            Computes the Hash code of a string and converts it into a Hex string.
            </summary>
            <param name="input">The string.</param>
            <returns>The Hash code, converted into a Hex string.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.Parameter">
            <summary>
            Represents a generic database parameter.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.Parameter.#ctor(ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericDbParameter" /> class.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.Parameter.Type">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.Parameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType">
            <summary>
            Lists parameter types.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.Int16">
            <summary>
            An Int16.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.Int32">
            <summary>
            An Int32.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.Int64">
            <summary>
            An Int64.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.String">
            <summary>
            A unicode string.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.Char">
            <summary>
            A unicode character.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.DateTime">
            <summary>
            A date/time.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.Byte">
            <summary>
            A byte.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.ParameterType.ByteArray">
            <summary>
            An array of bytes.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder">
            <summary>
            Defines an interface for a command builder component.
            </summary>
            <remarks>Classes implementing this interface should be <b>thread-safe</b>.</remarks>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.ObjectNamePrefix">
            <summary>
            Gets the table and column name prefix.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.ObjectNameSuffix">
            <summary>
            Gets the table and column name suffix.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.ParameterNamePrefix">
            <summary>
            Gets the parameter name prefix.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.ParameterNameSuffix">
            <summary>
            Gets the parameter name suffix.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.ParameterPlaceholder">
            <summary>
            Gets the parameter name placeholder.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.UseNamedParameters">
            <summary>
            Gets a value indicating whether to use named parameters. If <c>false</c>,
            parameter placeholders will be equal to <see cref="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.ParameterPlaceholder" />.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.BatchQuerySeparator">
            <summary>
            Gets the string to use in order to separate queries in a batch.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.GetConnection(System.String)">
            <summary>
            Gets a new database connection, open.
            </summary>
            <param name="connString">The connection string.</param>
            <returns>The connection.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.GetCommand(System.String,System.String,System.Collections.Generic.List{ScrewTurn.Wiki.Plugins.SqlCommon.Parameter})">
            <summary>
            Gets a properly built database command, with the underlying connection already open.
            </summary>
            <param name="connString">The connection string.</param>
            <param name="preparedQuery">The prepared query.</param>
            <param name="parameters">The parameters, if any.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.GetCommand(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{ScrewTurn.Wiki.Plugins.SqlCommon.Parameter})">
            <summary>
            Gets a properly built database command, re-using an open connection.
            </summary>
            <param name="connection">The open connection to use.</param>
            <param name="preparedQuery">The prepared query.</param>
            <param name="parameters">The parameters, if any.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder.GetCommand(System.Data.Common.DbTransaction,System.String,System.Collections.Generic.List{ScrewTurn.Wiki.Plugins.SqlCommon.Parameter})">
            <summary>
            Gets a properly built database command, re-using an open connection and a begun transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="preparedQuery">The prepared query.</param>
            <param name="parameters">The parameters, if any.</param>
            <returns>The command.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder">
            <summary>
            A tool for building queries.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.#ctor(ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:QueryBuilder" /> class.
            </summary>
            <param name="builder">The command builder.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.NewQuery(ScrewTurn.Wiki.Plugins.SqlCommon.ICommandBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:QueryBuilder" /> class.
            </summary>
            <param name="builder">The command builder.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.SelectFrom(System.String,System.String[])">
            <summary>
            Builds a SELECT query.
            </summary>
            <param name="table">The table.</param>
            <param name="columns">The columns to select.</param>
            <returns>The SELECT query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.SelectFrom(System.String)">
            <summary>
            Builds a SELECT query.
            </summary>
            <param name="table">The table.</param>
            <returns>The SELECT query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.SelectFrom(System.String,System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.Join,System.String[],System.String[])">
            <summary>
            Builds a SELECT query with a JOIN clause.
            </summary>
            <param name="table">The min table.</param>
            <param name="joinedTable">The joined table.</param>
            <param name="tableColumn">The main table column to join.</param>
            <param name="joinedTableColumn">The joined table column to join.</param>
            <param name="join">The JOIN type.</param>
            <param name="tableColumns">The main table columns to select.</param>
            <param name="joinedTableColumns">The joined table columns to select.</param>
            <returns>The SELECT query (returned columns are named like <b>[Table_Column]</b>).</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.SelectFrom(System.String,System.String,System.String[],System.String[],ScrewTurn.Wiki.Plugins.SqlCommon.Join,System.String[],System.String[])">
            <summary>
            Builds a SELECT query with a JOIN clause.
            </summary>
            <param name="table">The min table.</param>
            <param name="joinedTable">The joined table.</param>
            <param name="joinTableColumns">The main table columns to join.</param>
            <param name="joinJoinedTableColumns">The joined table columns to join.</param>
            <param name="join">The JOIN type.</param>
            <param name="tableColumns">The main table columns to select.</param>
            <param name="joinedTableColumns">The joined table columns to select.</param>
            <returns>The SELECT query (returned columns are named like <b>[Table_Column]</b>).</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.SelectFrom(System.String,System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.Join)">
            <summary>
            Builds a SELECT query with a JOIN clause.
            </summary>
            <param name="table">The main table.</param>
            <param name="joinedTable">The joined table.</param>
            <param name="tableColumn">The main table column to join.</param>
            <param name="joinedTableColumn">The joined table column to join.</param>
            <param name="join">The JOIN type.</param>
            <returns>The SELECT query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.SelectFrom(System.String,System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.Join,System.String[],System.String[],System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.Join,System.String[])">
            <summary>
            Builds a SELECT query with two JOIN clauses (both on the main table).
            </summary>
            <param name="table">The main table.</param>
            <param name="joinedTable">The joined table.</param>
            <param name="tableColumn">The main table column to join.</param>
            <param name="joinedTableColumn">The joined table column to join.</param>
            <param name="join">The join.</param>
            <param name="tableColumns">The main table columns to select.</param>
            <param name="joinedTableColumns">The joined table columns to select.</param>
            <param name="otherJoinedTable">The other joined table.</param>
            <param name="otherJoinedTableColumn">The other joined table column to join.</param>
            <param name="otherJoin">The join.</param>
            <param name="otherJoinedTableColumns">The other joined table columns to select.</param>
            <returns>The SELECT query (returned columns are named like <b>[Table_Column]</b>).</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.JoinToString(ScrewTurn.Wiki.Plugins.SqlCommon.Join)">
            <summary>
            Converts a Join type to its string representation.
            </summary>
            <param name="join">The join type.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.SelectCountFrom(System.String)">
            <summary>
            Builds a SELECT COUNT(*) query.
            </summary>
            <param name="table">The table.</param>
            <returns>The SELECT query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.BuildWhereClause(System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String)">
            <summary>
            Builds a WHERE clause condition.
            </summary>
            <param name="table">The table the column belongs to, or <c>null</c>.</param>
            <param name="column">The column.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The parameter name.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.Where(System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String)">
            <summary>
            Applies a WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.Where(System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String,System.Boolean,System.Boolean)">
            <summary>
            Applies a WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <param name="openBracket">A value indicating whether to open a bracket after the WHERE.</param>
            <param name="closeBracket">A value indicating whether to close a bracket after the clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.Where(System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String)">
            <summary>
            Applies a WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.Where(System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String,System.Boolean,System.Boolean)">
            <summary>
            Applies a WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <param name="openBracket">A value indicating whether to open a bracket after the WHERE.</param>
            <param name="closeBracket">A value indicating whether to close a bracket after the clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.BuildWhereInClause(System.String,System.String,System.String[])">
            <summary>
            Builds a WHERE clause with IN operator.
            </summary>
            <param name="table">The table the column belongs to, or <c>null</c>.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="parameters">The names of the parameters in the IN set.</param>
            <returns>The resulting clause.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.WhereIn(System.String,System.String,System.String[])">
            <summary>
            Applies a WHERE clause with IN operator to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="parameters">The names of the parameters in the IN set.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.WhereIn(System.String,System.String,System.String,System.String[])">
            <summary>
            Applies a WHERE clause with IN operator to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="parameters">The names of the parameters in the IN set.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.WhereNotInSubquery(System.String,System.String,System.String,System.String)">
            <summary>
            Applies a WHERE NOT IN (subQuery) clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column.</param>
            <param name="subQuery">The subQuery.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.AndWhere(System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.AndWhere(System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <param name="openBracket">A value indicating whether to open a bracket after the AND.</param>
            <param name="closeBracket">A value indicating whether to close a bracket after the clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.AndWhere(System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.AndWhere(System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <param name="openBracket">A value indicating whether to open a bracket after the AND.</param>
            <param name="closeBracket">A value indicating whether to close a bracket after the clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.OrWhere(System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.OrWhere(System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <param name="openBracket">A value indicating whether to open a bracket after the OR.</param>
            <param name="closeBracket">A value indicating whether to close a bracket after the clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.OrWhere(System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.OrWhere(System.String,System.String,System.String,ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds another WHERE clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="table">The table the column belongs to.</param>
            <param name="column">The column subject of the WHERE clause.</param>
            <param name="op">The operator.</param>
            <param name="parameter">The name of the parameter for the WHERE clause.</param>
            <param name="openBracket">A value indicating whether to open a bracket after the AND.</param>
            <param name="closeBracket">A value indicating whether to close a bracket after the clause.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.WhereOperatorToString(ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator)">
            <summary>
            Converts a WHERE operator to its corresponding string.
            </summary>
            <param name="op">The operator.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.OrderBy(System.String,System.String[],ScrewTurn.Wiki.Plugins.SqlCommon.Ordering[])">
            <summary>
            Applies an ORDER BY clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="columns">The columns to order by.</param>
            <param name="orderings">The ordering directions for each column.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.OrderingToString(ScrewTurn.Wiki.Plugins.SqlCommon.Ordering)">
            <summary>
            Converts an ordering to string.
            </summary>
            <param name="ordering">The ordering.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.GroupBy(System.String,System.String[])">
            <summary>
            Applies a GROUP BY clause to a query.
            </summary>
            <param name="query">The query.</param>
            <param name="columns">The columns to group by.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.InsertInto(System.String,System.String[],System.String[])">
            <summary>
            Builds an INSERT INTO query.
            </summary>
            <param name="table">The destination table.</param>
            <param name="columns">The columns names.</param>
            <param name="parameters">The parameters names.</param>
            <returns>The INSERT INTO query.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.Update(System.String,System.String[],System.String[])">
            <summary>
            Builds an UPDATE query.
            </summary>
            <param name="table">The table.</param>
            <param name="columns">The columns to update.</param>
            <param name="parameters">The parameters.</param>
            <returns>The UPDATE query, without any WHERE clause.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.UpdateIncrement(System.String,System.String,System.Int32)">
            <summary>
            Builds an UPDATE query that increments the numerical value of a column by one.
            </summary>
            <param name="table">The table.</param>
            <param name="column">The column to update.</param>
            <param name="increment">The increment or decrement value.</param>
            <returns>The UPDATE query, without any WHERE clause.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.DeleteFrom(System.String)">
            <summary>
            Builds a DELETE FROM query.
            </summary>
            <param name="table">The table.</param>
            <returns>The DELETE FROM query, without any WHERE clause.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.QueryBuilder.AppendForBatch(System.String,System.String)">
            <summary>
            Appends a query to an existing query for batch execution.
            </summary>
            <param name="query">The query.</param>
            <param name="secondQuery">The second query.</param>
            <returns>The resulting query.</returns>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator">
            <summary>
            Lists WHERE operators.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.Like">
            <summary>
            LIKE.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.Equals">
            <summary>
            =.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.NotEquals">
            <summary>
            &lt;&gt;.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.GreaterThan">
            <summary>
            &gt;.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.LessThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.GreaterThanOrEqualTo">
            <summary>
            &gt;=.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.LessThanOrEqualTo">
            <summary>
            &lt;=.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.IsNull">
            <summary>
            IS NULL.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.WhereOperator.IsNotNull">
            <summary>
            IS NOT NULL.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.Join">
            <summary>
            List JOIN types.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.Join.Join">
            <summary>
            JOIN.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.Join.InnerJoin">
            <summary>
            INNER JOIN.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.Join.LeftJoin">
            <summary>
            LEFT JOIN.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.Join.RightJoin">
            <summary>
            RIGHT JOIN.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.Ordering">
            <summary>
            Lists ordering directions.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.Ordering.Asc">
            <summary>
            Ascending.
            </summary>
        </member>
        <member name="F:ScrewTurn.Wiki.Plugins.SqlCommon.Ordering.Desc">
            <summary>
            Descending.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase">
            <summary>
            Implements a base class for a SQL users storage provider.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.TestAccount(ScrewTurn.Wiki.PluginFramework.UserInfo,System.String)">
            <summary>
            Tests a Password for a User account.
            </summary>
            <param name="user">The User account.</param>
            <param name="password">The Password to test.</param>
            <returns>True if the Password is correct.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="user"/> or <paramref name="password"/> are <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUsers">
            <summary>
            Gets the complete list of Users.
            </summary>
            <returns>All the Users, sorted by username.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.AddUser(System.String,System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Adds a new User.
            </summary>
            <param name="username">The Username.</param>
            <param name="displayName">The display name (can be <c>null</c>).</param>
            <param name="password">The Password.</param>
            <param name="email">The Email address.</param>
            <param name="active">A value indicating whether the account is active.</param>
            <param name="dateTime">The Account creation Date/Time.</param>
            <returns>The correct <see cref="T:UserInfo"/> object or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="username"/>, <paramref name="password"/> or <paramref name="email"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="username"/>, <paramref name="password"/> or <paramref name="email"/> are empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUserGroups(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Gets the user groups of a user.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="username">The username.</param>
            <returns>The groups.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUserGroups(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets the user groups of a user.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="username">The username.</param>
            <returns>The groups.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.ModifyUser(ScrewTurn.Wiki.PluginFramework.UserInfo,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Modifies a User.
            </summary>
            <param name="user">The Username of the user to modify.</param>
            <param name="newDisplayName">The new display name (can be <c>null</c>).</param>
            <param name="newPassword">The new Password (<c>null</c> or blank to keep the current password).</param>
            <param name="newEmail">The new Email address.</param>
            <param name="newActive">A value indicating whether the account is active.</param>
            <returns>The correct <see cref="T:UserInfo"/> object or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> or <b>newEmail</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>newEmail</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.RemoveUser(ScrewTurn.Wiki.PluginFramework.UserInfo)">
            <summary>
            Removes a User.
            </summary>
            <param name="user">The User to remove.</param>
            <returns>True if the User has been removed successfully.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUserGroups">
            <summary>
            Gets all the user groups.
            </summary>
            <returns>All the groups, sorted by name.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.AddUserGroup(System.String,System.String)">
            <summary>
            Adds a new user group.
            </summary>
            <param name="name">The name of the group.</param>
            <param name="description">The description of the group.</param>
            <returns>The correct <see cref="T:UserGroup"/> object or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>name</b> or <b>description</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>name</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUserGroupUsers(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Gets the users of a group.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="group">The group.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUserGroupUsers(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets the users of a group.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="group">The group.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.ModifyUserGroup(ScrewTurn.Wiki.PluginFramework.UserGroup,System.String)">
            <summary>
            Modifies a user group.
            </summary>
            <param name="group">The group to modify.</param>
            <param name="description">The new description of the group.</param>
            <returns>The correct <see cref="T:UserGroup"/> object or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>group</b> or <b>description</b> are <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.RemoveUserGroup(ScrewTurn.Wiki.PluginFramework.UserGroup)">
            <summary>
            Removes a user group.
            </summary>
            <param name="group">The group to remove.</param>
            <returns><c>true</c> if the group is removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>group</b> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.UserExists(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Verifies that a user exists.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="username">The username.</param>
            <returns><c>true</c> if the user exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.UserExists(System.Data.Common.DbConnection,System.String)">
            <summary>
            Verifies that a user exists.
            </summary>
            <param name="connection">A database connection.</param>
            <param name="username">The username.</param>
            <returns><c>true</c> if the user exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.RemoveUserGroupMembership(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Removes the user group membership for a user.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.SetUserMembership(ScrewTurn.Wiki.PluginFramework.UserInfo,System.String[])">
            <summary>
            Sets the group memberships of a user account.
            </summary>
            <param name="user">The user account.</param>
            <param name="groups">The groups the user account is member of.</param>
            <returns>The correct <see cref="T:UserGroup"/> object or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> or <b>groups</b> are <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.TryManualLogin(System.String,System.String)">
            <summary>
            Tries to login a user directly through the provider.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>The correct UserInfo object, or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>username</b> or <b>password</b> are <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.TryAutoLogin(System.Web.HttpContext)">
            <summary>
            Tries to login a user directly through the provider using
            the current HttpContext and without username/password.
            </summary>
            <param name="context">The current HttpContext.</param>
            <returns>The correct UserInfo object, or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>context</b> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUser(System.String)">
            <summary>
            Gets a user account.
            </summary>
            <param name="username">The username.</param>
            <returns>The <see cref="T:UserInfo"/>, or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>username</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>username</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUserByEmail(System.String)">
            <summary>
            Gets a user account.
            </summary>
            <param name="email">The email address.</param>
            <returns>The first user found with the specified email address, or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>email</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>email</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.NotifyCookieLogin(ScrewTurn.Wiki.PluginFramework.UserInfo)">
            <summary>
            Notifies the provider that a user has logged in through the authentication cookie.
            </summary>
            <param name="user">The user who has logged in.</param>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.NotifyLogout(ScrewTurn.Wiki.PluginFramework.UserInfo)">
            <summary>
            Notifies the provider that a user has logged out.
            </summary>
            <param name="user">The user who has logged out.</param>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.RemoveUserData(System.Data.Common.DbTransaction,System.String,System.String)">
            <summary>
            Removes a user data element.
            </summary>
            <param name="transaction">A database transaction.</param>
            <param name="username">The username.</param>
            <param name="key">The key.</param>
            <returns><c>true</c> if the data element is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.StoreUserData(ScrewTurn.Wiki.PluginFramework.UserInfo,System.String,System.String)">
            <summary>
            Stores a user data element, overwriting the previous one if present.
            </summary>
            <param name="user">The user the data belongs to.</param>
            <param name="key">The key of the data element (case insensitive).</param>
            <param name="value">The value of the data element, <c>null</c> for deleting the data.</param>
            <returns><c>true</c> if the data element is stored, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> or <b>key</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>key</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.RetrieveUserData(ScrewTurn.Wiki.PluginFramework.UserInfo,System.String)">
            <summary>
            Gets a user data element, if any.
            </summary>
            <param name="user">The user the data belongs to.</param>
            <param name="key">The key of the data element.</param>
            <returns>The value of the data element, or <c>null</c> if the element is not found.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> or <b>key</b> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>key</b> is empty.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.RetrieveAllUserData(ScrewTurn.Wiki.PluginFramework.UserInfo)">
            <summary>
            Retrieves all the user data elements for a user.
            </summary>
            <param name="user">The user.</param>
            <returns>The user data elements (key-&gt;value).</returns>
            <exception cref="T:System.ArgumentNullException">If <b>user</b> is <c>null</c>.</exception>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GetUsersWithData(System.String)">
            <summary>
            Gets all the users that have the specified element in their data.
            </summary>
            <param name="key">The key of the data.</param>
            <returns>The users and the data.</returns>
            <exception cref="T:System.ArgumentNullException">If <b>key</b> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <b>key</b> is empty.</exception>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.UserAccountsReadOnly">
            <summary>
            Gets a value indicating whether user accounts are read-only.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.UserGroupsReadOnly">
            <summary>
            Gets a value indicating whether user groups are read-only. If so, the provider 
            should support default user groups as defined in the wiki configuration.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.GroupMembershipReadOnly">
            <summary>
            Gets a value indicating whether group membership is read-only (if <see cref="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.UserAccountsReadOnly" /> 
            is <c>false</c>, then this property must be <c>false</c>). If this property is <c>true</c>, the provider 
            should return membership data compatible with default user groups.
            </summary>
        </member>
        <member name="P:ScrewTurn.Wiki.Plugins.SqlCommon.SqlUsersStorageProviderBase.UsersDataReadOnly">
            <summary>
            Gets a value indicating whether users' data is read-only.
            </summary>
        </member>
        <member name="T:ScrewTurn.Wiki.Plugins.SqlCommon.Tools">
            <summary>
            Implements tools.
            </summary>
        </member>
        <member name="M:ScrewTurn.Wiki.Plugins.SqlCommon.Tools.ReadStream(System.IO.Stream,System.Byte[]@,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:Stream" /> in a byte array, beginning at the current position through the end.
            </summary>
            <param name="stream">The <see cref="T:Stream" />.</param>
            <param name="buffer">The output byte array (allocated by the method).</param>
            <param name="maxSize">The max size to read.</param>
            <returns>The number of bytes read, or <b>-maxSize</b> if the max size is exceeded.</returns>
        </member>
    </members>
</doc>
